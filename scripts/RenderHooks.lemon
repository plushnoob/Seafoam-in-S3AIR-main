

global u8 sea_zone_banner
global u8 sea_display_banner
global u8 sea_banner_text
global u8 Banner_text
global u8 sea_palette

function bool standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
     u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	if (gameMode == 0x0c || gameMode == 0x08)
	u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	//ray support i can get rid of it if hiro asks me
		bool israypartner = (Mods.isModActive("Extra Slot Ray") && (System.getGlobalVariableValueByName("Ray_Partner") == 4 || System.getGlobalVariableValueByName("Ray_Partner") == 4)) 

	//BLUESPHERE PALETTE doesnt work because palettekey isnt inplemented in yet
	if (gameMode == 0x34 || gameMode == 0x48 || gameMode == 0x2c || gameMode == 0x30 || global.game_mode == 0x85 || global.game_mode == 0x87) && ((XtraChar == 3))
	{
	    	    if (blueSphereEXS)
			{
				if (char.animation.sprite >= 0xb0 && char.animation.sprite <= 0xb4 && objA0.update_address != 0x04e202 && objA0.update_address != 0x04e2f0)
				{
					u8 atex = 0x40 + 5 * 0x20
					u64 key = (char.animation.sprite != 0xb4 ? stringformat("character_slot6_0x%02x", objA0.animation.sprite) : "character_slot6_0xb3")
						Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue + 1)
					return true
				}
			}
     
	}  
    {
		//SIGNPOST
		if(objA0.update_address == 0x0837b2 && XtraChar == 6)
		{			
			if(objA0.animation.sprite == 0x00 && XtraChar == 6)
			{		
				u8 atex = 0x40 + 0x20 * getMainCharacter()
				Renderer.drawCustomSprite("goal_sonic", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
				return true
			}		
		}		
	}
    {
    		// Characters in special stage
		if (objA0.update_address == 0x00903e || objA0.update_address == 0x00927a)
		{
			u8 character = (objA0.update_address == 0x00927a) ? getSecondCharacter() : getMainCharacter()
			if (XtraChar == 6)
			{
				u8 atex = 0x00
				u64 key = stringformat("bluesphere_slot6_0x%02x",objA0.animation.sprite)
			
			//I need to apply the custom palette on game frames too. again doesnt work because i how to get it to work with different palttes not just one
				u64 paletteKey = 
				if (System.hasExternalPaletteData(paletteKey, 0))
				{
					atex = 0x40 + character * 0x20
				}
				//other than the custom standing frame, just take sonic's sprites from the game
				if (!Renderer.hasCustomSprite(key))
				{
					key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
				}
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}

		}
    }
}   



//praying that this works because i dont own escu
//# address-hook(0x0081c6) end(0x00858e)
function void SpecialStage()
{
	if (XtraChar != 6)
	{
		base.SpecialStage()
		return
	}
#if STANDALONE
	playMusic(MUSIC_CTRL_FADEOUT)
#else
	playMusic(MUSIC_CTRL_STOP)
#endif

	kosinski.queue_size = 0
	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	FadeScreenToWhiteBlocking()

#if STANDALONE
	// Add a small artificial delay here
	for (u8 i = 0; i < 12; ++i)
		yieldInWhiteScreen()
//#else
	//set_status_register(0x2700)
#endif

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)	// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0)
	VDP.Config.setBackdropColor(0x20)
	VDP.Config.setRenderingModeConfiguration(false)
	water.fullscreen = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffffe6e, 0x4c)
	zeroMemory(0xffffe400, 0x100)

	u32[0xfffffe66] = 0
	u32[0xfffffe6a] = 0

	fn01aa6e()

	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	// Load special stage palette
	//  -> Character colors is the 8 colors from 0xfffffc90 (for Sonic/Knuckles) and 0xfffffcb0 (for Tails)
	copyMemory(0xfffffc80, 0x00896e, 0x100)
	/*if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		copyMemory(0xfffffc90, 0x0089ee, 0x10)
	}*/

#if STANDALONE
// todo unfinished palettekey here need to wait for more palettes
    u64 paletteKey = 
	
	u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
		if (numColors > 0)
		{
			u32 dest = 0x802180 + getMainCharacter() * 0x40
			for (u16 i = 0; i < numColors; ++i)
			{
				u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
			}
		}
#endif

	Nemesis.loadDataToVRAM(0x0b07b8, SpecialStage.CheckerFloor.targetInVRAM)		// Checkered Floor

	fn0085b0()

	// Checkered Floor mapping
	Enigma.decompress(0x0aef54, 0xffff5500, (SpecialStage.CheckerFloor.targetInVRAM >> 5))
	copyRectToVRAM(0xffff5500, 0xc000, 0x28, 0x1c)

	Nemesis.loadDataToVRAM(0x0ad904, 0xd000)		// Sphere sprites
	Nemesis.loadDataToVRAM(0x0adf60, 0xb4e0)		// Special stage ring sprites
	Nemesis.loadDataToVRAM(0x0aeed0, SpecialStage.Background.targetInVRAM)
	Nemesis.loadDataToVRAM(0x0ad472, SpecialStage.TextPromps.targetInVRAM)		// "get blue spheres" and "perfect" text
	Nemesis.loadDataToVRAM(0x0ad5f4, 0xdf00)		// Arrow-like icon accompanying the above text
	Nemesis.loadDataToVRAM(0x0ad650, 0xf020)		// Special Stage HUD digits

	A0 = 0x0ad650
	A4 = 0xffffe020
	fn0015cc()

	Nemesis.loadDataToVRAM(0x0ad7bc, SpecialStage.HUDIcons.targetInVRAM)		// Special Stage HUD icons
	Nemesis.loadDataToVRAM(0x0ad430, 0xf400)		// Shadows

	copyRectToVRAM(0x008d2c, 0xc084, 0x08, 0x03)
	copyRectToVRAM(0x008d2c, 0xc0bc, 0x08, 0x03)

	Enigma.decompress(0x0aedb0, 0xffff0000, (sprite_attribute.PALETTE.LINE2 | (SpecialStage.Background.targetInVRAM >> 5)))
	copyRectToVRAM(0xffff0000, 0xe000, 0x40, 0x20)

	Kosinski.decompress(0x0b2e36, 0xffff0000)

	fn009ea0()
	fn00a0e6()

	global.level_started = 0
	bluespheres.bs_hud_dirty = 0xff
	bluespheres.rings_flags = 0x80
	bluespheres.current_gamespeed = 0x1000
	bluespheres.speedup_countdown = BlueSpheres.useGeneratedStages() ? 2700 : 1800
	camera.foreground.x.u16 = 0
	camera.foreground.y.u16 = 0
	level.height.bitmask = 0xffff

	u32[0xffffb000] = 0x008faa
	if (getNumPlayers() >= 2)
	{
		u32[0xffffb04a] = 0x009212
	}
	u32[0xffffb094] = 0x008df8
	u32[0xffffb0de] = 0x008e40
	UpdateGameObjects()

	fn009d9e()
	fn009dde()
	RenderSprites()

	BlueSpheres.RenderSpheres()
	fn009d5e()

	bluespheres.stage_exit_animation = 1
	global.frame_state = 0x1c

	waitForNextFrame()

	bluespheres.stage_exit_animation = 0
	VDP.Config.setRenderingModeConfiguration(true)		// Enable shadow/highlight palette mode

	global.demo_countdown = 1800
	fn0075d2()

#if STANDALONE
	if (BlueSpheres.useGeneratedStages())
	{
		playMusic(0xf8)		// Different music track, one that speeds up the music only every 45 (instead of 30) seconds
	}
	else
#endif
	{
		playMusic(0x1c)
	}

	VDP.Config.setActiveDisplay(true)
	BlueSpheres.FadeIn()

	while (true)
	{
		UpdateGamePause()
		global.frame_state = 0x1c
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()
	@EntryPoint:

		++level.framecounter
		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		BlueSpheres.RenderCharacterSprites()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#elif STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		if (global.rolling_demo && global.demo_countdown == 0)
			break

		if (global.game_mode != 0x34)	// Blue Spheres game mode
			break

	#if STANDALONE
		// Only needed to support restart from the Pause Menu
		//  -> Not used at the moment, so nevermind
		if (level.restart)
		{
			global.game_mode = 0x0c
			return
		}
	#endif
	}

	if (global.rolling_demo)
	{
		global.game_mode = 0
	}

	global.demo_countdown = 60
	palette_fade.range = 0x003f
	global.fadeout_countdown = 0

	while (true)
	{
		global.frame_state = 0x1c

		waitForNextFrame()

		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#elif STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		--global.fadeout_countdown
		if (s16(global.fadeout_countdown) < 0)
		{
			global.fadeout_countdown = 2
			FadePaletteToWhite()
		}

		if (global.demo_countdown == 0)
			break
	}
}



//palette stuff
//SET THE PALETTE -- REGULAR GAME HAS ITS OWN ENTRY
function string getCharacterPaletteKey(u8 character)
{
	u8 gameMode = global.game_mode & 0x7f
	if ((XtraChar == 3 && character == CHARACTER_SONIC && gameMode != 0x4c && gameMode != 0x44 && gameMode != 0x2c && gameMode != 0x30) || character == 3)
	{
		if      (sea_palette == 0)
			return "character_palette_sonic"
		else if (sea_palette == 1)
			return "character_palette_sonic"
	}
    return base.getCharacterPaletteKey(character)
}
function string getCharacterEndPosePaletteKey(u8 character)
{
	if (XtraChar != 6)
		return base.getCharacterEndPosePaletteKey(character)

	return " "
}

function u8 getModdedEndPosePaletteLine(u8 character, bool isHyperEffect)
{
	if (XtraChar != 6)
		return base.getModdedEndPosePaletteLine(character, isHyperEffect)

	return 0
}

function void loadCharacterEndPosePalette(u8 character, u32 targetAddress, u8 paletteVariant)
{
	if (XtraChar != 6)
	{
		base.loadCharacterEndPosePalette(character, targetAddress, paletteVariant)
		return
	}
}

function bool UpdatePaletteEffects.SuperForm.endpose()
{
	if (XtraChar != 6)
		return base.UpdatePaletteEffects.SuperForm.endpose()
	
	// Original version of effects -- does not support modded palettes
	return false
}

function void UpdatePaletteEffects.SuperForm.endpose.moddingVersion(u8 characterVersion)

{
	if (XtraChar != 6)
	{
		base.UpdatePaletteEffects.SuperForm.endpose.moddingVersion(characterVersion)
		return
	}
	// Update ongoing palette effect
	
}
